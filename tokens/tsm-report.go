package tokens

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/fxamacker/cbor/v2"
)

const (
	TSMReportMediaTypeCBOR = "application/vnd.veraison.tsm-report+cbor"
	TSMReportMediaTypeJSON = "application/vnd.veraison.tsm-report+json"
)

// BinaryString is base64url (ยง5 of RFC4648) without padding.
type BinaryString []byte

// MarshalJSON encodes BinaryString as JSON
func (o BinaryString) MarshalJSON() ([]byte, error) {
	return json.Marshal(
		base64.RawURLEncoding.EncodeToString(o),
	)
}

// UnmarshalJSON decodes BinaryString from JSON
func (o *BinaryString) UnmarshalJSON(b []byte) error {
	var s string

	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	decoded, err := base64.RawURLEncoding.DecodeString(s)
	if err != nil {
		return err
	}

	*o = decoded
	return nil
}

// TSMReport represents the TSM report generated by Linux
// see docs/tsm-report.cddl for definition
type TSMReport struct {
	AuxBlob         BinaryString `json:"auxblob,omitempty"`
	OutBlob         BinaryString `json:"outblob"`
	Provider        string       `json:"provider"`
	ManifestBlob    BinaryString `json:"manifestblob,omitempty"`
	ServiceProvider *string      `json:"service_provider,omitempty"`
}

// Valid checks if the TSMReport is populated correctly
func (t *TSMReport) Valid() error {
	if len(t.OutBlob) == 0 {
		return errors.New(`missing mandatory field "outblob"`)
	}

	if t.Provider == "" {
		return errors.New(`missing mandatory field "provider"`)
	}

	if len(t.ManifestBlob) > 0 && (t.ServiceProvider == nil || len(*t.ServiceProvider) == 0) {
		return errors.New(`stray field "manifestblob"`)
	}

	return nil
}

// ToJSON encodes TSMReport as JSON
func (t *TSMReport) ToJSON() ([]byte, error) {
	if err := t.Valid(); err != nil {
		return nil, fmt.Errorf("JSON encoding failed: %w", err)
	}

	return json.Marshal(t)
}

// FromJSON decodes TSMReport from JSON
func (t *TSMReport) FromJSON(data []byte) error {
	if err := json.Unmarshal(data, t); err != nil {
		return fmt.Errorf("JSON decoding failed: %w", err)
	}

	if err := t.Valid(); err != nil {
		return fmt.Errorf("JSON decoding failed: %w", err)
	}

	return nil
}

// ToCBOR encodes TSMReport as CBOR
func (t *TSMReport) ToCBOR() ([]byte, error) {
	if err := t.Valid(); err != nil {
		return nil, fmt.Errorf("CBOR encoding failed: %w", err)
	}

	return cbor.Marshal(t)
}

// FromCBOR decodes TSMReport from CBOR
func (t *TSMReport) FromCBOR(data []byte) error {
	if err := cbor.Unmarshal(data, t); err != nil {
		return fmt.Errorf("CBOR decoding failed: %w", err)
	}

	if err := t.Valid(); err != nil {
		return fmt.Errorf("CBOR decoding failed: %w", err)
	}

	return nil
}
