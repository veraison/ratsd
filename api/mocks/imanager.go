// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/veraison/ratsd/plugin (interfaces: IManager)
//
// Generated by this command:
//
//	mockgen -destination=../api/mocks/imanager.go -package=mocks github.com/veraison/ratsd/plugin IManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	plugin "github.com/veraison/ratsd/plugin"
	gomock "go.uber.org/mock/gomock"
)

// MockIManager is a mock of IManager interface.
type MockIManager struct {
	ctrl     *gomock.Controller
	recorder *MockIManagerMockRecorder
	isgomock struct{}
}

// MockIManagerMockRecorder is the mock recorder for MockIManager.
type MockIManagerMockRecorder struct {
	mock *MockIManager
}

// NewMockIManager creates a new mock instance.
func NewMockIManager(ctrl *gomock.Controller) *MockIManager {
	mock := &MockIManager{ctrl: ctrl}
	mock.recorder = &MockIManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIManager) EXPECT() *MockIManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIManager)(nil).Close))
}

// GetPluginList mocks base method.
func (m *MockIManager) GetPluginList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPluginList indicates an expected call of GetPluginList.
func (mr *MockIManagerMockRecorder) GetPluginList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginList", reflect.TypeOf((*MockIManager)(nil).GetPluginList))
}

// Init mocks base method.
func (m *MockIManager) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIManagerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIManager)(nil).Init))
}

// LookupByName mocks base method.
func (m *MockIManager) LookupByName(arg0 string) (plugin.IPluggable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupByName", arg0)
	ret0, _ := ret[0].(plugin.IPluggable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupByName indicates an expected call of LookupByName.
func (mr *MockIManagerMockRecorder) LookupByName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupByName", reflect.TypeOf((*MockIManager)(nil).LookupByName), arg0)
}
