// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/veraison/ratsd/plugin (interfaces: IPluggable)
//
// Generated by this command:
//
//	mockgen -destination=../api/mocks/ipluggable.go -package=mocks github.com/veraison/ratsd/plugin IPluggable
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	compositor "github.com/veraison/ratsd/proto/compositor"
	gomock "go.uber.org/mock/gomock"
)

// MockIPluggable is a mock of IPluggable interface.
type MockIPluggable struct {
	ctrl     *gomock.Controller
	recorder *MockIPluggableMockRecorder
	isgomock struct{}
}

// MockIPluggableMockRecorder is the mock recorder for MockIPluggable.
type MockIPluggableMockRecorder struct {
	mock *MockIPluggable
}

// NewMockIPluggable creates a new mock instance.
func NewMockIPluggable(ctrl *gomock.Controller) *MockIPluggable {
	mock := &MockIPluggable{ctrl: ctrl}
	mock.recorder = &MockIPluggableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPluggable) EXPECT() *MockIPluggableMockRecorder {
	return m.recorder
}

// GetEvidence mocks base method.
func (m *MockIPluggable) GetEvidence(in *compositor.EvidenceIn) *compositor.EvidenceOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidence", in)
	ret0, _ := ret[0].(*compositor.EvidenceOut)
	return ret0
}

// GetEvidence indicates an expected call of GetEvidence.
func (mr *MockIPluggableMockRecorder) GetEvidence(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidence", reflect.TypeOf((*MockIPluggable)(nil).GetEvidence), in)
}

// GetOptions mocks base method.
func (m *MockIPluggable) GetOptions() *compositor.OptionsOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*compositor.OptionsOut)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockIPluggableMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockIPluggable)(nil).GetOptions))
}

// GetSubAttesterID mocks base method.
func (m *MockIPluggable) GetSubAttesterID() *compositor.SubAttesterIDOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubAttesterID")
	ret0, _ := ret[0].(*compositor.SubAttesterIDOut)
	return ret0
}

// GetSubAttesterID indicates an expected call of GetSubAttesterID.
func (mr *MockIPluggableMockRecorder) GetSubAttesterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubAttesterID", reflect.TypeOf((*MockIPluggable)(nil).GetSubAttesterID))
}

// GetSupportedFormats mocks base method.
func (m *MockIPluggable) GetSupportedFormats() *compositor.SupportedFormatsOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedFormats")
	ret0, _ := ret[0].(*compositor.SupportedFormatsOut)
	return ret0
}

// GetSupportedFormats indicates an expected call of GetSupportedFormats.
func (mr *MockIPluggableMockRecorder) GetSupportedFormats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedFormats", reflect.TypeOf((*MockIPluggable)(nil).GetSupportedFormats))
}
