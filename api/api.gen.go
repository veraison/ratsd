//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for BadRequestErrorStatus.
const (
	N400 BadRequestErrorStatus = 400
)

// Defines values for BadRequestErrorTitle.
const (
	InvalidRequest BadRequestErrorTitle = "invalid request"
)

// Defines values for BadRequestErrorType.
const (
	TagGithubCom2024VeraisonratsdErrorInvalidrequest BadRequestErrorType = "tag:github.com,2024:veraison/ratsd:error:invalidrequest"
)

// Defines values for CMWTyp.
const (
	ApplicationvndVeraisonConfigfsTsmJson CMWTyp = "application/vnd.veraison.configfs-tsm+json"
)

// Defines values for EATEatProfile.
const (
	TagGithubCom2024Veraisonratsd EATEatProfile = "tag:github.com,2024:veraison/ratsd"
)

// Defines values for UnauthorizedErrorStatus.
const (
	N401 UnauthorizedErrorStatus = 401
)

// Defines values for UnauthorizedErrorTitle.
const (
	AccessUnauthorized UnauthorizedErrorTitle = "access unauthorized"
)

// Defines values for UnauthorizedErrorType.
const (
	TagGithubCom2024VeraisonratsdErrorUnauthorized UnauthorizedErrorType = "tag:github.com,2024:veraison/ratsd:error:unauthorized"
)

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	Detail   *string               `json:"detail,omitempty"`
	Instance *string               `json:"instance,omitempty"`
	Status   BadRequestErrorStatus `json:"status"`
	Title    BadRequestErrorTitle  `json:"title"`
	Type     BadRequestErrorType   `json:"type"`
}

// BadRequestErrorStatus defines model for BadRequestError.Status.
type BadRequestErrorStatus float32

// BadRequestErrorTitle defines model for BadRequestError.Title.
type BadRequestErrorTitle string

// BadRequestErrorType defines model for BadRequestError.Type.
type BadRequestErrorType string

// CMW defines model for CMW.
type CMW struct {
	Typ CMWTyp `json:"typ"`
	Val string `json:"val"`
}

// CMWTyp defines model for CMW.Typ.
type CMWTyp string

// ChaResRequest defines model for ChaResRequest.
type ChaResRequest struct {
	AttesterSelection json.RawMessage `json:"attester-selection,omitempty"`
	Nonce             string          `json:"nonce"`
}

// EAT defines model for EAT.
type EAT struct {
	EatProfile  EATEatProfile `json:"eat_profile"`
	NestedToken CMW           `json:"nested-token"`
}

// EATEatProfile defines model for EAT.EatProfile.
type EATEatProfile string

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError struct {
	Detail   *string                 `json:"detail,omitempty"`
	Instance *string                 `json:"instance,omitempty"`
	Status   UnauthorizedErrorStatus `json:"status"`
	Title    UnauthorizedErrorTitle  `json:"title"`
	Type     UnauthorizedErrorType   `json:"type"`
}

// UnauthorizedErrorStatus defines model for UnauthorizedError.Status.
type UnauthorizedErrorStatus float32

// UnauthorizedErrorTitle defines model for UnauthorizedError.Title.
type UnauthorizedErrorTitle string

// UnauthorizedErrorType defines model for UnauthorizedError.Type.
type UnauthorizedErrorType string

// ChaResRequestParametersAccept defines model for ChaResRequestParameters.accept.
type ChaResRequestParametersAccept = string

// RatsdCharesParams defines parameters for RatsdChares.
type RatsdCharesParams struct {
	Accept *ChaResRequestParametersAccept `json:"accept,omitempty"`
}

// RatsdCharesApplicationVndVeraisonCharesPlusJSONRequestBody defines body for RatsdChares for application/vnd.veraison.chares+json ContentType.
type RatsdCharesApplicationVndVeraisonCharesPlusJSONRequestBody = ChaResRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /ratsd/chares)
	RatsdChares(w http.ResponseWriter, r *http.Request, params RatsdCharesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// RatsdChares operation middleware
func (siw *ServerInterfaceWrapper) RatsdChares(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RatsdCharesParams

	headers := r.Header

	// ------------- Optional header parameter "accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("accept")]; found {
		var Accept ChaResRequestParametersAccept
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "accept", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accept", Err: err})
			return
		}

		params.Accept = &Accept

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RatsdChares(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/ratsd/chares", wrapper.RatsdChares)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7SW32/bNhDH/xWC21sVWcmCPWjYg+PloQ8FijRDH9JgOJNni5lEcseTW6/Q/z6QtGI7",
	"UZq0yB6lO54+9+N71FepXOedRctB1l+lB4IOGSk9LRq4wnCF//QY+P29qQSl0HP0MFbWskHQSLKQFjqU",
	"tdyZCxlUgx1EP976aAlMxq7lMAyjMX3nAvTuI5dEjhIIOY/EBpODRgbTTgQqpLGBwSqcNAYG7lMEtH0n",
	"65vzqrotRj/bd0uk6MeGWzxwk8ZuoDVaUMaS+0P74PnF/gzDul4bbvplqVxXnFVn5/UGCUxwdkbAQdcY",
	"06t3wZ+OPRQyGg2hToGjdYS8T2p/zC3vUHFEWrz7+Lh4vPWHmOB9axSwcXa2sbocEUvl7MqsV+GEQ/fm",
	"Ljg7mfUGUh9WjjpgWcslBPz1vKdWviANmc9Poh/O2uMkgBkDI50EbFFF+COKhPsQoJBfTlxnGDvPW1kz",
	"9TgU0rrdtPxACvlsMUUzldPl/PpxJgj8lye3Mu13Ts9kO2zk0Cfs/sZUkZ8JV7KWP832up7tlDaL0/Ew",
	"o0OaB9GmMvrTQs+NI/Mv6v9fq6cv0mpcNyGI/gDtdfX6TOQfVGtMGVVPhrcfYoNy9S4QCGnecxOfUufi",
	"oWV6vZ/PhtnnNWrsyqV65rLIq/n1B3G5MRqtQrFw7W5AxR+AnbNi/v5tVCFSSBqSVVmVp7E8zqMFb2Qt",
	"fymrspKF9MBNgsrVmKkGKFN6lzWqMSgyPssxSrht0a5REAbvbMD4tVLM030QBAh17wFWF6L3zorQp/4V",
	"Yo0WCRiD4AYFjikYKy7n1+LzTCzefRRZtKVMvJS22Fsd046EiwxYHF1jN9Oi2LvMnrnmhtvcYAx84fQ2",
	"5q2cZbSpBE+v0wSTF+nYSnhWokdbcDierd0CG4ubOnFWVd8AQuA3d5/5N3Eg898/vWDyP8mXM8ctl0iP",
	"p+G6wfH6FA2E3GfUqMs4beff5Pbkli1231m8h78RT0AFpA2SUK5vtbCORW81UtxMOk3eCK17FOzE+CsQ",
	"tpbhyw7+9NXhH2/WCfx5XnXmeNuVR8skTfzhGrm5HW6HYRj+CwAA///mvptn7AkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
