// Copyright 2025 Contributors to the Veraison project.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: compositor.proto

package compositor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Compositor_GetOptions_FullMethodName          = "/compositor.Compositor/GetOptions"
	Compositor_GetSubAttesterID_FullMethodName    = "/compositor.Compositor/GetSubAttesterID"
	Compositor_GetSupportedFormats_FullMethodName = "/compositor.Compositor/GetSupportedFormats"
	Compositor_GetEvidence_FullMethodName         = "/compositor.Compositor/GetEvidence"
)

// CompositorClient is the client API for Compositor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompositorClient interface {
	GetOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionsOut, error)
	GetSubAttesterID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SubAttesterIDOut, error)
	GetSupportedFormats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedFormatsOut, error)
	GetEvidence(ctx context.Context, in *EvidenceIn, opts ...grpc.CallOption) (*EvidenceOut, error)
}

type compositorClient struct {
	cc grpc.ClientConnInterface
}

func NewCompositorClient(cc grpc.ClientConnInterface) CompositorClient {
	return &compositorClient{cc}
}

func (c *compositorClient) GetOptions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OptionsOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptionsOut)
	err := c.cc.Invoke(ctx, Compositor_GetOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositorClient) GetSubAttesterID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SubAttesterIDOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubAttesterIDOut)
	err := c.cc.Invoke(ctx, Compositor_GetSubAttesterID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositorClient) GetSupportedFormats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedFormatsOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportedFormatsOut)
	err := c.cc.Invoke(ctx, Compositor_GetSupportedFormats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositorClient) GetEvidence(ctx context.Context, in *EvidenceIn, opts ...grpc.CallOption) (*EvidenceOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvidenceOut)
	err := c.cc.Invoke(ctx, Compositor_GetEvidence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompositorServer is the server API for Compositor service.
// All implementations must embed UnimplementedCompositorServer
// for forward compatibility.
type CompositorServer interface {
	GetOptions(context.Context, *emptypb.Empty) (*OptionsOut, error)
	GetSubAttesterID(context.Context, *emptypb.Empty) (*SubAttesterIDOut, error)
	GetSupportedFormats(context.Context, *emptypb.Empty) (*SupportedFormatsOut, error)
	GetEvidence(context.Context, *EvidenceIn) (*EvidenceOut, error)
	mustEmbedUnimplementedCompositorServer()
}

// UnimplementedCompositorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompositorServer struct{}

func (UnimplementedCompositorServer) GetOptions(context.Context, *emptypb.Empty) (*OptionsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptions not implemented")
}
func (UnimplementedCompositorServer) GetSubAttesterID(context.Context, *emptypb.Empty) (*SubAttesterIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubAttesterID not implemented")
}
func (UnimplementedCompositorServer) GetSupportedFormats(context.Context, *emptypb.Empty) (*SupportedFormatsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedFormats not implemented")
}
func (UnimplementedCompositorServer) GetEvidence(context.Context, *EvidenceIn) (*EvidenceOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvidence not implemented")
}
func (UnimplementedCompositorServer) mustEmbedUnimplementedCompositorServer() {}
func (UnimplementedCompositorServer) testEmbeddedByValue()                    {}

// UnsafeCompositorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompositorServer will
// result in compilation errors.
type UnsafeCompositorServer interface {
	mustEmbedUnimplementedCompositorServer()
}

func RegisterCompositorServer(s grpc.ServiceRegistrar, srv CompositorServer) {
	// If the following call pancis, it indicates UnimplementedCompositorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Compositor_ServiceDesc, srv)
}

func _Compositor_GetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositorServer).GetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compositor_GetOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositorServer).GetOptions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compositor_GetSubAttesterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositorServer).GetSubAttesterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compositor_GetSubAttesterID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositorServer).GetSubAttesterID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compositor_GetSupportedFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositorServer).GetSupportedFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compositor_GetSupportedFormats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositorServer).GetSupportedFormats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compositor_GetEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvidenceIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositorServer).GetEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Compositor_GetEvidence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositorServer).GetEvidence(ctx, req.(*EvidenceIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Compositor_ServiceDesc is the grpc.ServiceDesc for Compositor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compositor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compositor.Compositor",
	HandlerType: (*CompositorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOptions",
			Handler:    _Compositor_GetOptions_Handler,
		},
		{
			MethodName: "GetSubAttesterID",
			Handler:    _Compositor_GetSubAttesterID_Handler,
		},
		{
			MethodName: "GetSupportedFormats",
			Handler:    _Compositor_GetSupportedFormats_Handler,
		},
		{
			MethodName: "GetEvidence",
			Handler:    _Compositor_GetEvidence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compositor.proto",
}
