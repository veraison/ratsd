// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package compositor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CompositorClient is the client API for Compositor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompositorClient interface {
	GetSubAttesterID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SubAttesterIDOut, error)
	GetSupportedFormats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedFormatsOut, error)
	GetEvidence(ctx context.Context, in *EvidenceIn, opts ...grpc.CallOption) (*EvidenceOut, error)
}

type compositorClient struct {
	cc grpc.ClientConnInterface
}

func NewCompositorClient(cc grpc.ClientConnInterface) CompositorClient {
	return &compositorClient{cc}
}

func (c *compositorClient) GetSubAttesterID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SubAttesterIDOut, error) {
	out := new(SubAttesterIDOut)
	err := c.cc.Invoke(ctx, "/compositor.Compositor/GetSubAttesterID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositorClient) GetSupportedFormats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SupportedFormatsOut, error) {
	out := new(SupportedFormatsOut)
	err := c.cc.Invoke(ctx, "/compositor.Compositor/GetSupportedFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositorClient) GetEvidence(ctx context.Context, in *EvidenceIn, opts ...grpc.CallOption) (*EvidenceOut, error) {
	out := new(EvidenceOut)
	err := c.cc.Invoke(ctx, "/compositor.Compositor/GetEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompositorServer is the server API for Compositor service.
// All implementations must embed UnimplementedCompositorServer
// for forward compatibility
type CompositorServer interface {
	GetSubAttesterID(context.Context, *emptypb.Empty) (*SubAttesterIDOut, error)
	GetSupportedFormats(context.Context, *emptypb.Empty) (*SupportedFormatsOut, error)
	GetEvidence(context.Context, *EvidenceIn) (*EvidenceOut, error)
	mustEmbedUnimplementedCompositorServer()
}

// UnimplementedCompositorServer must be embedded to have forward compatible implementations.
type UnimplementedCompositorServer struct {
}

func (UnimplementedCompositorServer) GetSubAttesterID(context.Context, *emptypb.Empty) (*SubAttesterIDOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubAttesterID not implemented")
}
func (UnimplementedCompositorServer) GetSupportedFormats(context.Context, *emptypb.Empty) (*SupportedFormatsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedFormats not implemented")
}
func (UnimplementedCompositorServer) GetEvidence(context.Context, *EvidenceIn) (*EvidenceOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvidence not implemented")
}
func (UnimplementedCompositorServer) mustEmbedUnimplementedCompositorServer() {}

// UnsafeCompositorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompositorServer will
// result in compilation errors.
type UnsafeCompositorServer interface {
	mustEmbedUnimplementedCompositorServer()
}

func RegisterCompositorServer(s *grpc.Server, srv CompositorServer) {
	s.RegisterService(&_Compositor_serviceDesc, srv)
}

func _Compositor_GetSubAttesterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositorServer).GetSubAttesterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositor.Compositor/GetSubAttesterID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositorServer).GetSubAttesterID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compositor_GetSupportedFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositorServer).GetSupportedFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositor.Compositor/GetSupportedFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositorServer).GetSupportedFormats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compositor_GetEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvidenceIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositorServer).GetEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositor.Compositor/GetEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositorServer).GetEvidence(ctx, req.(*EvidenceIn))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compositor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compositor.Compositor",
	HandlerType: (*CompositorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubAttesterID",
			Handler:    _Compositor_GetSubAttesterID_Handler,
		},
		{
			MethodName: "GetSupportedFormats",
			Handler:    _Compositor_GetSupportedFormats_Handler,
		},
		{
			MethodName: "GetEvidence",
			Handler:    _Compositor_GetEvidence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compositor.proto",
}
